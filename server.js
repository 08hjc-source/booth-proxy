import express from "express";
import cors from "cors";
import multer from "multer";
import fs from "fs";

const app = express();

app.use(
  cors({
    origin: "*",
    methods: ["GET", "POST", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
  })
);

app.options("/upload", (req, res) => {
  res.sendStatus(200);
});

const upload = multer();

// ‚¨á‚¨á‚¨á Ïó¨Í∏∞ ÎÑà ÌÜ†ÌÅ∞ ÎÑ£Ïñ¥
const DROPBOX_TOKEN = "Bearer sl.u.AGETpn391W2nwklxtA8oo41Gnatvu3sPidlLCA1zA9sey13ED_RlgxygVckdBIbQbl1veL0YxaGh-3Pk66U1uFCuwm-LHVqw_ERrvjVHNCHXE3LUeYKwLDzFxaPSubFVJZD3DafBresjaqFF87w5_3CwlOioun-DOqLdfnDTPzDlnH_FBt0Gnq3Z2vIWU1opWwXtKT9WPO2ihkqpotRR8TIBN6-2GEm3aFKnxOuviJx8M2yAKD_HTZghI2PylOq6MEfAG-aRV52SBsIH5a6ge7epqR_5w_ReJL_FSrkAFQv9vrwn4pO_jD3LIbSN3JCbPn1nUOSBjnhRvn4GJ7846e291h2f2C-ibdPer23H0CUNXdBJyP4qoGI5uSo-sdZmXb8fvsY9kFgAQEpL-Bx65EqGnZOrD-DUoPga3ulTHY4V-K7O97Gy1M0yCffy-PUNEqN0FVEwrfX1pXUm2ycekmwSdxpfjSXTZmel0CrcawFVQWAo8TYtZ0BtxNarnxOrwoEkIxqabjM8ge3J8kigZSuxyb3hSBAL35_BOQTbpPyr8p9qiSj4iWKkrxTk8M0joNozcMPm_9qOhIWktoHNplFeP3bYIAd7YOVbEsHDllwRMHVCnwXwXTN6gLLFK11G0ujTgHX4NsS4RQZQ-UM3X0WE35KSnJ0wRgfpHsl7LyAMol1V_wXDF0Otebe-BkKwJMNdzbUZrCzkh3aBGKiqoTWvCRtodYEtgOF5ymJW5BYyxfc5luvMvKkf5z2xaZ7V3keX6XRYtNmi9zcllk-WHmCioS1N-K3xtQlMhJMkyk__WY_BXGDkt4rWMKARLFqNjrTb7AATZ5clpUrwlaKwP7TTa1rlFpZ3MsphUiPRnHMfA5rwDYVM1I6nps3AFTwvoFbq_nxKxg1rwK7HCRXSA9EcV6rMwQIx6oXGEjQHaaH38tz4rWaSHW7o3QGL-lS3M7QQZAF_PhcborCZ0ItWz5S9x6mRX6oJnmFuVTZhjK5WVcitsE2C6EFYxH3wIIwGVZf1t2xUmAXOmObHygd5LIdEDzqPHddjbhwApJHfl-eNcEfqY06bVz9wnKH57tLlIeWtwW-5gz0hO-zA31F0KF0oUh3s_kzq0nlLKee8QDfPIKn-hgrVYiIEwT9LjMXCLokdI2A-Rh-L34lA9r3XhiN9Dn0Mi8A8iIKtb8RfopZbMbXqhRm3c1melFyzhFxUxU-F_gRz6hzblfOvTj5JZhl61CWza4hch3woH5n2ClLqVabUSq1A3dOg8jUtC6tuRnbTpR4yqOjlpbRM_nWCCHPVop0eMSoSrzdeddP5g1hBA4ZPnnJBUTP3f8Ctc5xcMbGpEV_6x9oPThphvnl7mlomandSqHwSJRnenhnVfBB4SfcDcSZy0HUzyDU-whRhpWoNKTlGixG5j9VOqboWo2D1";
const OPENAI_KEY = process.env.OPENAI_KEY;

// ÎãâÎÑ§ÏûÑÏùÑ ASCIIÎ°úÎßå ÎßåÎì§Ïñ¥ÏÑú Dropbox ÌååÏùºÎ™ÖÏóê Ïì∞Í∏∞ (ÎìúÎ°≠Î∞ïÏä§ Ìó§ÎçîÏóê ÌïúÍ∏Ä Î™ªÎì§Ïñ¥Í∞ÄÏÑú)
function sanitizeAsciiFilename(userLabel) {
  const asciiOnly = (userLabel || "")
    .normalize("NFKD")
    .replace(/[^\x00-\x7F]/g, "")    // ASCII ÏïÑÎãå Í∏ÄÏûê Ï†úÍ±∞ (ÌïúÍ∏Ä Îì±)
    .replace(/[\/\\:\*\?"<>\|]/g, "") // ÏúÑÌóòÎ¨∏Ïûê Ï†úÍ±∞
    .replace(/\s+/g, "_")
    .trim();
  return asciiOnly || "user";
}

// ÌïúÍµ≠ ÏãúÍ∞Ñ HHMMSS
function getKSTTimeTag() {
  const now = new Date();
  const kst = new Date(now.getTime() + 9 * 60 * 60 * 1000);
  const hh = String(kst.getUTCHours()).padStart(2, "0");
  const mm = String(kst.getUTCMinutes()).padStart(2, "0");
  const ss = String(kst.getUTCSeconds()).padStart(2, "0");
  return `${hh}${mm}${ss}`;
}

// Dropbox ÏóÖÎ°úÎìú (ÏõêÎ≥∏ / Í≤∞Í≥º)
async function uploadToDropbox(pathInDropbox, fileBytes) {
  const resp = await fetch("https://content.dropboxapi.com/2/files/upload", {
    method: "POST",
    headers: {
      Authorization: DROPBOX_TOKEN,
      "Dropbox-API-Arg": JSON.stringify({
        path: pathInDropbox,
        mode: "add",
        autorename: true,
        mute: false,
      }),
      "Content-Type": "application/octet-stream",
    },
    body: fileBytes,
  });

  const data = await resp.json();
  if (!resp.ok) {
    console.error("Dropbox upload fail:", data);
    throw new Error("dropbox upload failed");
  }
  return data;
}

// üî• Ïä§ÌÉÄÏùº Î≥ÄÌôò Ìï®Ïàò
// userPhotoBytes: Î∞©Í∏à Ï∞çÏùÄ ÏÇ¨Îûå ÏÇ¨ÏßÑ (Buffer)
// Ïä§ÌÉÄÏùº Ï∞∏Í≥† Ïù¥ÎØ∏ÏßÄÎäî style_ref_1~4.png Ï†ÑÎ∂Ä ÏÇ¨Ïö©
async function stylizeWithOpenAI(userPhotoBytes) {
  // 1) Ïä§ÌÉÄÏùº Î†àÌçºÎü∞Ïä§ Ïù¥ÎØ∏ÏßÄÎì§ ÏùΩÍ∏∞
  //    ÎÑàÎäî repo Î£®Ìä∏(= server.jsÎûë Í∞ôÏùÄ Ìè¥Îçî)Ïóê
  //    style_ref_1.png, style_ref_2.png, style_ref_3.png, style_ref_4.png
  //    Ïù¥ ÎÑ§ Ïû•ÏùÑ ÎÑ£Ïñ¥ÎëêÎ©¥ ÎêúÎã§.
  const styleFiles = [
    "style_ref_1.png",
    "style_ref_2.png",
    "style_ref_3.png",
    "style_ref_4.png",
  ];

  const styleBuffers = styleFiles.map((path) => {
    try {
      return fs.readFileSync(path);
    } catch (e) {
      console.error(`Ïä§ÌÉÄÏùº Ïù¥ÎØ∏ÏßÄ ${path} Î™ª ÏùΩÏùå`, e);
      return null;
    }
  }).filter(Boolean);

  if (styleBuffers.length === 0) {
    throw new Error("Ïä§ÌÉÄÏùº Î†àÌçºÎü∞Ïä§ Ïù¥ÎØ∏ÏßÄÎ•º ÌïòÎÇòÎèÑ Î™ª ÏùΩÏóàÏñ¥.");
  }

  // 2) multipart/form-data ÎßåÎì§Í∏∞
  // OpenAI Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë APIÏóê Ïó¨Îü¨ Ïù¥ÎØ∏ÏßÄÎ•º ÎèôÏãúÏóê ÎÑ£Í≥†
  // promptÏóêÏÑú "Ï≤´ Î≤àÏß∏Îäî ÏÇ¨Ïö©Ïûê ÏÇ¨ÏßÑ(ÏΩòÌÖêÏ∏†), ÎÇòÎ®∏ÏßÄ 4Ïû•ÏùÄ Ïä§ÌÉÄÏùº Î†àÌçºÎü∞Ïä§"ÎùºÍ≥† Î™ÖÏãúÌï¥.
  const formData = new FormData();

  // (1) Ïú†Ï†Ä Ïã§Ï†ú ÏÇ¨ÏßÑ: Ìï≠ÏÉÅ Í∞ÄÏû• Î®ºÏ†Ä appendÌïúÎã§.
  formData.append(
    "image[]",
    new Blob([userPhotoBytes], { type: "image/png" }),
    "subject.png"
  );

  // (2) Ïä§ÌÉÄÏùº Î†àÌçºÎü∞Ïä§Îì§: Í∑∏ Îã§ÏùåÏóê Ï†ÑÎ∂Ä append
  styleBuffers.forEach((buf, i) => {
    formData.append(
      "image[]",
      new Blob([buf], { type: "image/png" }),
      `style_ref_${i + 1}.png`
    );
  });

  // 3) prompt: Î™®Îç∏ÏóêÍ≤å Ïó≠Ìï†ÏùÑ ÏïÑÏ£º Î™ÖÌôïÌïòÍ≤å ÏÑ§Î™Ö
  // ÌïµÏã¨:
  // - Ï≤´ Î≤àÏß∏ Ïù¥ÎØ∏ÏßÄÎäî "Í∑∏Î¶¥ ÎåÄÏÉÅ"
  // - ÎÇòÎ®∏ÏßÄ Ïù¥ÎØ∏ÏßÄÎì§ÏùÄ "Ï∞∏Í≥†Ìï† Ïä§ÌÉÄÏùº"
  // - Í≥µÌÜµ Ïä§ÌÉÄÏùºÏùÑ Ï∂îÏ∂úÌï¥Îùº (4Ïû• Î≥¥Í≥† ÏùºÍ¥ÄÎêú Î£©ÏúºÎ°ú)
  formData.append(
    "prompt",
    [
      "Use the FIRST image as the subject (the person's real face, hair, clothing, pose).",
      "Use ALL following images as style references.",
      "Redraw the subject in the unified visual style shared by the style reference images:",
      "same type of line thickness, outline color, fill style, shading style, proportions, and overall vibe.",
      "Keep the person's identity, hairstyle, outfit colors, and pose from the first image, but render them as stylized illustration.",
      "Output with a clean plain background (white or transparent), no text, no watermark."
    ].join(" ")
  );

  // ÏõêÌïòÎäî Í≤∞Í≥º Ìï¥ÏÉÅÎèÑ
  formData.append("size", "1024x1024");

  // 4) OpenAI Ïù¥ÎØ∏ÏßÄ Ìé∏Ïßë/Ïä§ÌÉÄÏùº Ï†ÑÌôò API Ìò∏Ï∂ú
  const resp = await fetch("https://api.openai.com/v1/images/edits", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${OPENAI_KEY}`,
    },
    body: formData,
  });

  const result = await resp.json();

  if (!resp.ok) {
    console.error("OpenAI style remix fail:", result);
    throw new Error("openai style remix failed");
  }

  // OpenAI ÏùëÎãµÏùÄ base64 PNGÎ•º Ï§ÄÎã§Í≥† Î¨∏ÏÑúÌôîÎèº ÏûàÏùå.
  const b64 = result.data[0].b64_json;
  const outBytes = Buffer.from(b64, "base64");
  return outBytes;
}

app.post("/upload", upload.single("photo"), async (req, res) => {
  try {
    // 1) Îì§Ïñ¥Ïò® Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    if (!req.file || !req.file.buffer) {
      return res.status(400).json({
        ok: false,
        message: "no file buffer",
      });
    }

    const fileBuffer = req.file.buffer;

    // ÎãâÎÑ§ÏûÑ (ÌïúÍ∏Ä Í∑∏ÎåÄÎ°ú ÏïàÎÇ¥ Ïö©)
    const rawName =
      req.body && typeof req.body.name === "string" ? req.body.name : "";

    console.log("Î∞õÏùÄ Ïù¥Î¶Ñ:", rawName);

    // ÎìúÎ°≠Î∞ïÏä§Ïö© ÌååÏùºÎ™Ö Î≤†Ïù¥Ïä§ (ASCII)
    const safeBase = sanitizeAsciiFilename(rawName);
    const timeTag = getKSTTimeTag();

    // ÏõêÎ≥∏ Ï†ÄÏû• Í≤ΩÎ°ú (/booth_uploads/...)
    const origFileName = `${safeBase}_${timeTag}.png`;
    const origPath = `/booth_uploads/${origFileName}`;

    // 2) ÏõêÎ≥∏ Dropbox ÏóÖÎ°úÎìú
    await uploadToDropbox(origPath, fileBuffer);

    // 3) GPT Ïù¥ÎØ∏ÏßÄ Ïä§ÌÉÄÏùº Î≥ÄÌôò Ïã§Ìñâ
    const stylizedBytes = await stylizeWithOpenAI(fileBuffer);

    // 4) Í≤∞Í≥º Dropbox ÏóÖÎ°úÎìú (/booth_outputs/...)
    const outFileName = `${safeBase}_${timeTag}_stylized.png`;
    const outPath = `/booth_outputs/${outFileName}`;
    await uploadToDropbox(outPath, stylizedBytes);

    // 5) ÌîÑÎü∞Ìä∏ ÏùëÎãµ
    return res.json({
      ok: true,
      user: rawName,               // "Ï∞¨" Í∞ôÏùÄ Ïã§Ï†ú ÎãâÎÑ§ÏûÑ
      original_path: origPath,     // ÏõêÎ≥∏Ïù¥ DropboxÏóê Ïñ¥Îîî Ï†ÄÏû•ÎêêÎäîÏßÄ
      stylized_path: outPath,      // Ïä§ÌÉÄÏùº Î≥ÄÌôòÎ≥∏Ïù¥ Dropbox Ïñ¥ÎîîÏóê ÏûàÎäîÏßÄ
      status: "done",
    });
  } catch (err) {
    console.error("ÏÑúÎ≤Ñ ÎÇ¥Î∂Ä Ïò§Î•ò:", err);
    return res.status(500).json({
      ok: false,
      message: "server crashed in upload flow",
      error: String(err && err.message ? err.message : err),
    });
  }
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log("Server running on port " + port);
});




